import type { ConnectionInfo } from '@prisma/driver-adapter-utils';
import type { DriverAdapter } from '@prisma/driver-adapter-utils';
import pg from 'pg';
import type { Query } from '@prisma/driver-adapter-utils';
import type { Queryable } from '@prisma/driver-adapter-utils';
import type { Result } from '@prisma/driver-adapter-utils';
import type { ResultSet } from '@prisma/driver-adapter-utils';
import type { Transaction } from '@prisma/driver-adapter-utils';

declare class PgQueryable<ClientT extends StdClient | TransactionClient> implements Queryable {
    protected readonly client: ClientT;
    readonly provider = "postgres";
    constructor(client: ClientT);
    /**
     * Execute a query given as SQL, interpolating the given parameters.
     */
    queryRaw(query: Query): Promise<Result<ResultSet>>;
    /**
     * Execute a query given as SQL, interpolating the given parameters and
     * returning the number of affected rows.
     * Note: Queryable expects a u64, but napi.rs only supports u32.
     */
    executeRaw(query: Query): Promise<Result<number>>;
    /**
     * Run a query against the database, returning the result set.
     * Should the query fail due to a connection error, the connection is
     * marked as unhealthy.
     */
    private performIO;
}

export declare class PrismaPg extends PgQueryable<StdClient> implements DriverAdapter {
    private options?;
    constructor(client: pg.Pool, options?: PrismaPgOptions | undefined);
    getConnectionInfo(): Result<ConnectionInfo>;
    startTransaction(): Promise<Result<Transaction>>;
}

declare type PrismaPgOptions = {
    schema?: string;
};

declare type StdClient = pg.Pool;

declare type TransactionClient = pg.PoolClient;

export { }
